import random
from collections import Counter
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from src.storage.store import load_store, save_store, clear_notification_flag
from src.decorators.checkban import check_ban_status
from src.game.logic import WORDLIST
from src.main.constants import GUESSING, ASK_LENGTH

@check_ban_status
async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    store = load_store()
    user_entry = store["users"].setdefault(user_id, {
        "stats": {"games_played": 0, "wins": 0, "losses": 0}
    })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞
    if "current_game" not in user_entry:
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")
        return ConversationHandler.END

    cg = user_entry["current_game"]

    # –ï—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ ‚Äî –Ω–µ –¥–∞–µ–º –µ—â–µ –æ–¥–Ω—É
    if cg.get("hint_used", False):
        await update.message.reply_text("–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return GUESSING

    secret = cg["secret"]
    length = len(secret)

    # –°–∫–æ–ª—å–∫–æ –±—É–∫–≤ –Ω—É–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å
    hint_counts = {4:1, 5:2, 6:2, 7:3, 8:3, 9:4, 10:4, 11:5}
    num_letters = hint_counts.get(length, 1)

    # –°—á–∏—Ç–∞–µ–º –±—É–∫–≤—ã –≤ secret
    secret_counter = Counter(secret)

    # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: —Ä–∞–∑–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è, –Ω–æ >= num_letters –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    candidates = []
    for w in WORDLIST:
        if len(w) != length or w == secret:
            continue
        w_counter = Counter(w)
        # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ –º–∏–Ω–∏–º—É–º—É
        common = sum(min(secret_counter[ch], w_counter[ch]) for ch in w_counter)
        if common == num_letters:
            candidates.append(w)

    if not candidates:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–µ—Ç.")
        return GUESSING

    hint_word = random.choice(candidates)

    # –û—Ç–º–µ—á–∞–µ–º –≤ JSON, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤–∑—è—Ç–∞
    cg["hint_used"] = True
    save_store(store)

    await update.message.reply_text(f"üîç –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_word}")
    return GUESSING


@check_ban_status
async def hint_not_allowed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ /hint –≤—ã–∑–≤–∞–ª–∏ –Ω–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    clear_notification_flag(str(update.effective_user.id))
    await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.")
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ–º –¥–ª–∏–Ω—É ‚Äî –æ—Å—Ç–∞–Ω–µ–º—Å—è –≤ ASK_LENGTH, –∏–Ω–∞—á–µ –≤ GUESSING
    return context.user_data.get("state", ASK_LENGTH)