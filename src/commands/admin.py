import os
import json
import logging
from io import BytesIO
from collections import Counter
from telegram import Update, BotCommand, BotCommandScopeChat, InputFile
from telegram.ext import ContextTypes

from src.storage.store import load_store, save_store
from src.main.config import ADMIN_ID, BASE_FILE, USER_FILE

logger = logging.getLogger(__name__)

async def set_commands(app):
    
    await app.bot.set_my_commands(
        [
            BotCommand("start",         "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
            BotCommand("play",          "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
            BotCommand("hint",    "–ü–æ–¥—Å–∫–∞–∑–∫–∞"),
            BotCommand("reset",         "–°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É"),
            BotCommand("notification",         "–í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
            BotCommand("my_stats",      "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("global_stats",  "–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("feedback", "–ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–ª–æ–≤–æ"),
            BotCommand("dict_file",  "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"),
            BotCommand("dump_activity", "–°–∫–∞—á–∞—Ç—å user_activity.json"),
            BotCommand("suggestions_view", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–¥–±–µ–∫ —é–∑–µ—Ä–æ–≤"),
            BotCommand("suggestions_move", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ add —Å–ø–∏—Å–æ–∫"),
            BotCommand("suggestions_remove", "–£–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ —Ñ–∏–¥–±–µ–∫–∞"),
            BotCommand("suggestions_approve", "–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"),
            BotCommand("broadcast", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —é–∑–µ—Ä–∞–º"),
            BotCommand("broadcast_cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"),
            BotCommand("ban", "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            BotCommand("unban", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        ],
        scope=BotCommandScopeChat(chat_id=ADMIN_ID)
    )


async def send_activity_periodic(context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∏ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) —à–ª–µ—Ç user_activity.json –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —à–ª–µ—Ç –µ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.
    """
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    activity_path = USER_FILE
    if not activity_path.exists():
        return

    content = activity_path.read_text(encoding="utf-8")
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    MAX_LEN = 4000

    if len(content) <= MAX_LEN:
        # –ú–æ–∂–Ω–æ –≤—Ç–∏—Å–Ω—É—Ç—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìã –¢–µ–∫—É—â–∏–π user_activity.json:\n<pre>{content}</pre>",
            parse_mode="HTML"
        )
    else:
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        with activity_path.open("rb") as f:
            await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=InputFile(f, filename="user_activity.json"),
                caption="üìÅ user_activity.json (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞)"
            )


async def dict_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if update.effective_user.id != ADMIN_ID:
        return

    # –ß–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ base_words.json
    with BASE_FILE.open("r", encoding="utf-8") as f:
        data = json.load(f)
        main_words = data.get("main", [])
        additional_words = data.get("additional", [])

    total_main = len(main_words)
    total_additional = len(additional_words)
    total = total_main + total_additional

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã (4‚Äì11)
    main_length_counts = Counter(len(w) for w in main_words)
    additional_length_counts = Counter(len(w) for w in additional_words)

    stats_lines = []
    for length in range(4, 12):
        main_count = main_length_counts.get(length, 0)
        additional_count = additional_length_counts.get(length, 0)
        stats_lines.append(f"{length} –±—É–∫–≤: {main_count} (main) + {additional_count} (additional) = {main_count + additional_count}")

    stats_text = "\n".join(stats_lines)

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤ —Ñ–∞–π–ª
    data = "=== Main Words ===\n" + "\n".join(main_words) + "\n\n=== Additional Words ===\n" + "\n".join(additional_words)
    bio = BytesIO(data.encode("utf-8"))
    bio.name = "wordlist.txt"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—â–µ–π –∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    await update.message.reply_document(
        document=bio,
        filename="wordlist.txt",
        caption=(
            f"üìö –í —Å–ª–æ–≤–∞—Ä–µ –≤—Å–µ–≥–æ {total} —Å–ª–æ–≤:\n"
            f"‚Ä¢ {total_main} –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ\n"
            f"‚Ä¢ {total_additional} –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ\n\n"
            f"üî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ:\n{stats_text}"
        )
    )


async def dump_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    path = USER_FILE  # —ç—Ç–æ Path("user_activity.json")
    if not path.exists():
        return await update.message.reply_text("–§–∞–π–ª user_activity.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç, –∏ –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    content = path.read_text("utf-8")
    if len(content) < 3000:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–¥–æ–≤–æ–º –±–ª–æ–∫–µ
        return await update.message.reply_text(
            f"<pre>{content}</pre>", parse_mode="HTML"
        )

    # –∏–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    with path.open("rb") as f:
        await update.message.reply_document(
            document=InputFile(f, filename=path.name),
            caption="üìÅ user_activity.json"
        )


async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /ban <user_id>")
        return
    
    user_id = context.args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID
    if not user_id.isdigit():
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return
    
    store = load_store()
    users = store["users"]
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if user_id not in users:
        users[user_id] = {
            "first_name": f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_id})",
            "suggested_words": [],
            "stats": {"games_played": 0, "wins": 0, "losses": 0, "win_rate": 0.0},
            "banned": True,
            "notification": False  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –±–∞–Ω–µ
        }
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
        if users[user_id].get("banned", False):
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            users[user_id]["banned"] = True
            users[user_id]["notification"] = False  # –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –±–∞–Ω–µ
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ guessing
            if "current_game" in users[user_id]:
                del users[user_id]["current_game"]
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[user_id].get('first_name', user_id)} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            try:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n"
                         "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –±–∞–Ω–∞
                context.user_data.clear()
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    save_store(store)


async def unban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if update.effective_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /unban <user_id>")
        return
    
    user_id = context.args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID
    if not user_id.isdigit():
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return
    
    store = load_store()
    users = store["users"]
    
    if user_id not in users:
        await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    else:
        if not users[user_id].get("banned", False):
            await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            users[user_id]["banned"] = False
            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if "notification" in users[user_id]:
                del users[user_id]["notification"]
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if "current_game" in users[user_id]:
                del users[user_id]["current_game"]
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω
            users[user_id]["was_banned"] = True
            save_store(store)
            save_store(store)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {users[user_id].get('first_name', user_id)} (ID: {user_id}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            try:
                await context.bot.send_message(
                    chat_id=int(user_id),
                    text="‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–æ—Ç–µ.\n\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω
                context.user_data["was_banned"] = True
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")