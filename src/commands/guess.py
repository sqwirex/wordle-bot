import json
from datetime import datetime
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes, ConversationHandler

from storage import load_store, save_store, load_suggestions, save_suggestions
from commands import check_ban_status
from game import render_full_board_with_keyboard, WORDLIST, normalize
from ..config import BASE_FILE
from ..constants import GUESSING

@check_ban_status
async def handle_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    store   = load_store()
    user    = store["users"].setdefault(user_id, {
        "first_name": update.effective_user.first_name,
        "stats": {"games_played": 0, "wins": 0, "losses": 0}
    })

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–∑–∏—Ç–∞
    user["last_seen_msk"] = datetime.now(ZoneInfo("Europe/Moscow")).isoformat()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    if "current_game" not in user:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –Ω–∞—á–Ω–∏ /play")
        return ConversationHandler.END

    cg     = user["current_game"]
    guess = normalize(update.message.text)
    secret = cg["secret"]
    length = len(secret)

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –∑–∞–º–µ–Ω—è–µ–º —ë –Ω–∞ –µ)
    normalized_guess = normalize(guess)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã
    if " " in guess:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return GUESSING
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(guess) != length:
        await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ {length} –±—É–∫–≤.")
        return GUESSING
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ —Å–ª–æ–≤–æ —Ä–∞–Ω–µ–µ
    user_id = str(update.effective_user.id)
    user = store["users"].get(user_id, {})
    suggested_words = user.get("suggested_words", [])
    
    if normalized_guess in suggested_words and normalized_guess not in WORDLIST:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–∞–º–∏, –Ω–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        return GUESSING
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–∞—Ö
    with BASE_FILE.open("r", encoding="utf-8") as f:
        data = json.load(f)
        main_words = set(data.get("main", []))
        additional_words = set(data.get("additional", []))
        all_words = main_words | additional_words
    
    if normalized_guess not in all_words:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        keyboard = [
            [
                InlineKeyboardButton(
                    "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ",
                    callback_data=f"suggest_white:{guess}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            f"–°–ª–æ–≤–æ ¬´{normalized_guess}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.",
            reply_markup=reply_markup
        )
        return GUESSING

    if " " in guess:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.")
        return GUESSING

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ–¥
    cg["guesses"].append(guess)
    cg["attempts"] += 1
    save_store(store)

    # –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É –∏–∑ 6 —Å—Ç—Ä–æ–∫ + –º–∏–Ω–∏-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∏–∑—É.
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∫—Ä—É–ø–Ω–µ–µ –¥–ª—è —Å–ª–æ–≤ ‚â•8 –±—É–∫–≤, —á—É—Ç—å –º–µ–Ω—å—à–µ –¥–ª—è 7 –∏ –µ—â–µ –º–µ–Ω—å—à–µ –¥–ª—è 4‚Äì5.
    img_buf = render_full_board_with_keyboard(
        guesses=cg["guesses"],
        secret=secret,
        total_rows=6,
        max_width_px=1080
    )
    await update.message.reply_photo(
        photo=InputFile(img_buf, filename="wordle_board.png"),
        caption=f"–ü–æ–ø—ã—Ç–∫–∞ {cg['attempts']} –∏–∑ 6"
    )

    # ‚Äî‚Äî –ü–æ–±–µ–¥–∞ ‚Äî‚Äî
    if guess == secret:
        stats = user["stats"]
        stats["games_played"] += 1
        stats["wins"] += 1
        stats["win_rate"] = stats["wins"] / stats["games_played"]

        g = store["global"]
        g["total_games"] += 1
        g["total_wins"] += 1
        g["win_rate"] = g["total_wins"] / g["total_games"]

        top_uid, top_data = max(
            store["users"].items(),
            key=lambda kv: kv[1]["stats"]["wins"]
        )
        store["global"]["top_player"] = {
            "user_id":  top_uid,
            "username": top_data.get("username") or top_data.get("first_name", ""),
            "wins":     top_data["stats"]["wins"]
        }

        await update.message.reply_text(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£–≥–∞–¥–∞–ª –∑–∞ {cg['attempts']} "
            f"{'–ø–æ–ø—ã—Ç–∫–∞' if cg['attempts']==1 else '–ø–æ–ø—ã—Ç–∫–∏' if 2<=cg['attempts']<=4 else '–ø–æ–ø—ã—Ç–æ–∫'}.\n"
            "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤–Ω–æ–≤—å, –≤–≤–µ–¥–∏ /play."
        )
        del user["current_game"]
        context.user_data.pop("game_active", None)
        context.user_data["just_done"] = True
        save_store(store)
        return ConversationHandler.END

    # ‚Äî‚Äî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ ‚Äî‚Äî
    if cg["attempts"] >= 6:
        stats = user["stats"]
        stats["games_played"] += 1
        stats["losses"] += 1
        stats["win_rate"] = stats["wins"] / stats["games_played"]

        g = store["global"]
        g["total_games"] += 1
        g["total_losses"] += 1
        g["win_rate"] = g["total_wins"] / g["total_games"]

        await update.message.reply_text(
            f"üíî –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ë—ã–ª–æ —Å–ª–æ–≤–æ ¬´{secret}¬ª.\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏ /play."
        )
        del user["current_game"]
        context.user_data.pop("game_active", None)
        context.user_data["just_done"] = True
        save_store(store)
        return ConversationHandler.END

    # –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
    return GUESSING


@check_ban_status
async def ignore_guess(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã /start –∏ /play –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ /reset.")
    return GUESSING


@check_ban_status
async def suggest_white_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ callback_data –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –µ–≥–æ
    word = normalize(query.data.split(':', 1)[1])
    user_id = str(update.effective_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å
    current_suggestions = load_suggestions()
    with BASE_FILE.open("r", encoding="utf-8") as f:
        base_words = set(json.load(f))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    store = load_store()
    user = store["users"].get(user_id, {})
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if word not in current_suggestions["white"] and word not in base_words:
        current_suggestions["white"].add(word)
        save_suggestions(current_suggestions)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global suggestions
        suggestions = current_suggestions
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if "suggested_words" not in user:
        user["suggested_words"] = []
    
    if word not in user["suggested_words"]:
        user["suggested_words"].append(word)
        save_store(store)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
    await query.edit_message_text(
        f"‚úÖ –°–ª–æ–≤–æ ¬´{word}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
    )
    
    return GUESSING