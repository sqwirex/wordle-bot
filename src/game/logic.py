import json
from typing import Dict, List
from ..config import BASE_FILE
from ..constants import GREEN, YELLOW, WHITE


def normalize(text: str) -> str:
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ —É–±–∏—Ä–∞–µ–º ¬´–µ¬ª
    return text.strip().lower().replace("—ë", "–µ")


# –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ base_words.json
with BASE_FILE.open("r", encoding="utf-8") as f:
    base_words = json.load(f)
    main_words = base_words.get("main", [])
    additional_words = base_words.get("additional", [])

# –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–ª–∏–Ω–∞ 4‚Äì11 —Å–∏–º–≤–æ–ª–æ–≤
# –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–æ–≤–∞ (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –∑–∞–º–µ–Ω–∞ —ë –Ω–∞ –µ)
filtered_main = [normalize(w) for w in main_words if w.isalpha() and 4 <= len(w) <= 11]
filtered_additional = [normalize(w) for w in additional_words if w.isalpha() and 4 <= len(w) <= 11]

# –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
filtered_main = list(dict.fromkeys(filtered_main))
filtered_additional = list(dict.fromkeys(filtered_additional))

# –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
WORDLIST = sorted(filtered_main)
with BASE_FILE.open("w", encoding="utf-8") as f:
    json.dump({"main": WORDLIST, "additional": sorted(filtered_additional)}, f, ensure_ascii=False, indent=2)


def compute_letter_status(secret: str, guesses: List[str]) -> Dict[str, str]:
    """
    –î–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      - "green"  –µ—Å–ª–∏ –±—ã–ª–∞ üü©
      - "yellow" –µ—Å–ª–∏ –±—ã–ª–∞ üü® (–∏ –Ω–µ –±—ã–ª–∞ üü©)
      - "red"    –µ—Å–ª–∏ –±—ã–ª–∞ ‚¨ú (–∏ –Ω–µ –±—ã–ª–∞ –Ω–∏ üü©, –Ω–∏ üü®)
    """
    status: dict[str,str] = {}
    for guess in guesses:
        fb = [] 
        s_chars = list(secret)
        # —Å–Ω–∞—á–∞–ª–∞ –∑–µ–ª–µ–Ω—ã–µ
        for i,ch in enumerate(guess):
            if secret[i] == ch:
                fb.append("üü©")
                s_chars[i] = None
            else:
                fb.append(None)
        # –∑–∞—Ç–µ–º –∂–µ–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
        for i,ch in enumerate(guess):
            if fb[i] is None:
                if ch in s_chars:
                    fb[i] = "üü®"
                    s_chars[s_chars.index(ch)] = None
                else:
                    fb[i] = "‚¨ú"
        # –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        for ch,sym in zip(guess, fb):
            prev = status.get(ch)
            if sym == "üü©":
                status[ch] = "green"
            elif sym == "üü®" and prev != "green":
                status[ch] = "yellow"
            elif sym == "‚¨ú" and prev not in ("green","yellow"):
                status[ch] = "red"
    return status


def make_feedback(secret: str, guess: str) -> str:
    fb = [None] * len(guess)
    secret_chars = list(secret)
    # 1) –∑–µ–ª–µ–Ω—ã–µ
    for i, ch in enumerate(guess):
        if secret[i] == ch:
            fb[i] = GREEN
            secret_chars[i] = None
    # 2) –∂–µ–ª—Ç—ã–µ/–∫—Ä–∞—Å–Ω—ã–µ
    for i, ch in enumerate(guess):
        if fb[i] is None:
            if ch in secret_chars:
                fb[i] = YELLOW
                secret_chars[secret_chars.index(ch)] = None
            else:
                fb[i] = WHITE
    return "".join(fb)
